=====================
empty defnclass
=====================
defns
typing :: 'ty_' ::=
---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)))

========================
missing defnclass name
:error
========================
defns
:: 'ty_' ::=
---

==================================
single defn block with no rules
==================================
defns
typing :: 'ty_' ::=

defn
GG |- x : t ~> X :: :: test :: 'typing_'
by

---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix))))

==================================
missing rule name
:error
==================================
defns
typing :: 'ty_' ::=

defn
GG |- x : t ~> X :: :: 'typing_'
by

---

==================================
single defn block with no rules and no newline
:skip
==================================
defns
typing :: 'ty_' ::=

defn
GG |- x : t ~> X :: :: test :: 'typing_'
by
---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix))))

=====================================================
single defn block with no rules and homomorphism
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_' {{ tex [[|-]] \color{blue} [[psi]] \normalcolor }}
by

---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      homomorphism: (homomorphism
        name: (hom_name)
        body: (hom_body)))))


=====================================================
single defn block with one rule with no predicates
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3

---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line)))))

=====================================================
multiple newlines after last rule
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3

---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line)))))

=====================================================
inline conclusion
:error
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo |- z1 o z2 ~ z3

---

=====================================================
multiple conclusions in one rule
:error
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3
|- z1 < d z2
---

=====================================================
single defn block with one rule with one predicate
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

gg |- z3
---------------- :: Combo
|- z1 o z2 ~ z3

---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        premise: (rule_line)
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line)))))

=========================================================
single defn block with one rule with multiple predicates
=========================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

gg |- z1
gg |- z2
gg |- z3
---------------- :: Combo
|- z1 o z2 ~ z3

---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        premise: (rule_line)
        premise: (rule_line)
        premise: (rule_line)
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line)))))

=====================================================
multiple rules in a single defn block
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3


|- d
---------------- :: Sub
|- z1 < d z2

---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line))
      definition_rule: (defn_rule
        premise: (rule_line)
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line)))))

=====================================================
multiple defn blocks in a single defnclass
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3


defn
psi mem gg ::  :: var_sub :: 'var_sub_'
by

|- psi
---------------- :: Sub
|- psi mem gg

---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line)))
    definition: (defn
      element: (element)
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        premise: (rule_line)
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line)))))

=====================================================
multiple defnclasses
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3

defns
kinding :: 'k' ::=

defn
gg |- t : k :: :: kind :: 'kind_'
by

------------------ :: BoolTrue
|- true : boolean

---
(source_file
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line))))
  (defnclass
    class_name: (string)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      element: (element)
      definition_name: (string)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (string))
        conclusion: (rule_line)))))
