=====================
empty defnclass
=====================
defns
typing :: 'ty_' ::=
---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)))

==================================
single defn block with no rules
==================================
defns
typing :: 'ty_' ::=

defn
GG |- x : t ~> X :: :: test :: 'typing_'
by

---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix))))

==================================
single defn block with no rules and no newline
==================================
defns
typing :: 'ty_' ::=

defn
GG |- x : t ~> X :: :: test :: 'typing_'
by
---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix))))

=====================================================
single defn block with no rules and homomorphism
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_' {{ tex [[|-]] \color{blue} [[psi]] \normalcolor }}
by

---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      homomorphism: (homomorphism
        name: (hom_name)
        body: (hom_body
          hom_inner_block: (hom_inner_block
            (string))
          hom_inner_block: (hom_inner_block
            (string)))))))

=====================================================
single defn block with one rule with no predicates
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3

---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string)
          (string)
          (string))))))

=====================================================
no blank line after last rule
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3
---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string)
          (string)
          (string))))))

=====================================================
multiple newlines after last rule
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3


---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string)
          (string)
          (string))))))

=====================================================
single defn block with one rule with one predicate
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

gg |- z3
---------------- :: Combo
|- z1 o z2 ~ z3

---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        premise: (rule_line
          (string)
          (string)
          (string))
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string)
          (string)
          (string))))))

=========================================================
single defn block with one rule with multiple predicates
=========================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

gg |- z1
gg |- z2
gg |- z3
---------------- :: Combo
|- z1 o z2 ~ z3

---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        premise: (rule_line
          (string)
          (string)
          (string))
        premise: (rule_line
          (string)
          (string)
          (string))
        premise: (rule_line
          (string)
          (string)
          (string))
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string)
          (string)
          (string))))))

=====================================================
multiple rules in a single defn block
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3


|- d
---------------- :: Sub
|- z1 < d z2

---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string)
          (string)
          (string)))
      definition_rule: (defn_rule
        premise: (rule_line
          (string)
          (string))
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string)
          (string))))))

=====================================================
multiple defn blocks in a single defnclass
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3


defn
psi mem gg ::  :: var_sub :: 'var_sub_'
by

|- psi
---------------- :: Sub
|- psi mem gg

---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string)
          (string)
          (string))))
    definition: (defn
      element: (string)
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        premise: (rule_line
          (string)
          (string))
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string))))))

=====================================================
multiple defnclasses
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3

defns
kinding :: 'k' ::=

defn
gg |- t : k :: :: kind :: 'kind_'
by

------------------ :: BoolTrue
|- true : boolean

---

(source_file
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string)
          (string)
          (string)))))
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)
    definition: (defn
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      definition_name: (defn_name)
      namespace_prefix: (namespace_prefix)
      definition_rule: (defn_rule
        separator: (rule_separator
          line: (dash_line)
          rule_name: (rule_name))
        conclusion: (rule_line
          (string)
          (string)
          (string)
          (string))))))

========================
missing defnclass name
:error
========================
defns
:: 'ty_' ::=
---

==================================
missing rule name
:error
==================================
defns
typing :: 'ty_' ::=

defn
GG |- x : t ~> X :: :: 'typing_'
by

---

=====================================================
inline conclusion
:error
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo |- z1 o z2 ~ z3
---

=====================================================
rule_name on next line
:error
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- ::
Combo
|- z1 o z2 ~ z3
---

=====================================================
double-colon on next line
:error
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

----------------|||
:: Combo
|- z1 o z2 ~ z3
---

=====================================================
multiple conclusions in one rule
:error
=====================================================
defns
typing :: 'ty_' ::=

defn
|- psi ::  :: psi_wf :: 'psi_wf_'
by

---------------- :: Combo
|- z1 o z2 ~ z3
|- z1 < d z2
---

