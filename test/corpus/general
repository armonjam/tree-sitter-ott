=========================
grammar with metavars
=========================

metavar a {{ tex \alpha }}, b, c ::=
indexvar i, j ::=

grammar

type, t :: 'ty_' ::=
  | a                   ::  :: var
  | </ ti // -> // i /> ::  :: arrow
---

(source_file
  (metavardefn
    (id_desc
      (id)
      (homomorphism
        name: (hom_name)
        body: (hom_body)))
    (id_desc
      (id))
    (id_desc
      (id)))
  (metavardefn
    (id_desc
      (id))
    (id_desc
      (id)))
  (grammar_rule
    (id_desc
      (id))
    (id_desc
      (id))
    (namespace_prefix)
    (production
      element: (string)
      production_name: (production_name))
    (production
      element: (string)
      element: (string)
      element: (comprehension_bound
        (id))
      production_name: (production_name))))

===========================================
grammar with metavars and empty defns block
===========================================
metavar a {{ tex \alpha }}, b, c ::=
indexvar i, j ::=

grammar

type, t :: 'ty_' ::=
  | a                   ::  :: var
  | </ ti // -> // i /> ::  :: arrow

defns
typing :: 'ty_' ::=

---

(source_file
  (metavardefn
    (id_desc
      (id)
      (homomorphism
        name: (hom_name)
        body: (hom_body)))
    (id_desc
      (id))
    (id_desc
      (id)))
  (metavardefn
    (id_desc
      (id))
    (id_desc
      (id)))
  (grammar_rule
    (id_desc
      (id))
    (id_desc
      (id))
    (namespace_prefix)
    (production
      element: (string)
      production_name: (production_name))
    (production
      element: (string)
      element: (string)
      element: (comprehension_bound
        (id))
      production_name: (production_name)))
  (defnclass
    class_name: (defnclass_name)
    namespace_prefix: (namespace_prefix)))
