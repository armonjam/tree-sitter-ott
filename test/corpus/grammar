===================
no productions
===================
grammar
type, t :: 't_' ::=
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)))

===================
one production
===================
grammar

term, M :: 'term_' ::=
  | x               ::  :: var
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      production_name: (production_name))))

===================
one production with dots
===================
grammar

term, M :: 'term_' ::=
  | x1 ... xn            ::  :: var
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      element: (dots)
      element: (string)
      production_name: (production_name))))

===================
one production with simple comprehension
===================
grammar

term, M :: 'term_' ::=
  | </ ggi |- c // i />            ::  :: var
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      element: (string)
      element: (string)
      element: (comprehension_bound
        (string))
      production_name: (production_name))))

===================
one production with bounded comprehension
===================
grammar

term, M :: 'term_' ::=
  | </ ggi |- c // i IN n />            ::  :: var
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      element: (string)
      element: (string)
      element: (comprehension_bound
        (string)
        (string))
      production_name: (production_name))))

===================
one production with bounded comprehension dots
===================
grammar

term, M :: 'term_' ::=
  | </ ggi |- c // i IN 1 .. n />            ::  :: var
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      element: (string)
      element: (string)
      element: (comprehension_bound
        (string)
        (string)
        (dots)
        (string))
      production_name: (production_name))))

===================
inline grammar token
===================
grammar term, M :: 'term_' ::=
  | x               ::  :: var
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      production_name: (production_name))))

===================
production mod
===================
grammar term, M :: 'term_' ::=
  | x               :: S:: var
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      modifier: (production_mod)
      production_name: (production_name))))

======================
multiple productions
======================
grammar
term, M :: 'term_' ::=
  | x               ::  :: var
  | \ x . M         ::  :: lam
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      production_name: (production_name))
    (production
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      production_name: (production_name))))

======================
multiple productions with homomorphisms
======================
grammar
term, M :: 'term_' ::=
  | x               ::  :: var {{ tex [[x]] }}
  | \ x . M         ::  :: lam {{ tex \lambda [[x]] . [[M]] }}
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      production_name: (production_name)
      homomorphism: (homomorphism
        name: (hom_name)
        body: (hom_body
          hom_inner_block: (hom_inner_block
            (string)))))
    (production
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      production_name: (production_name)
      homomorphism: (homomorphism
        name: (hom_name)
        body: (hom_body
          hom_inner_block: (hom_inner_block
            (string))
          hom_inner_block: (hom_inner_block
            (string)))))))

======================
angle bracket before closing square bracket
======================
grammar
term, M :: 'term_' ::=
  | r1 ~< mu r2       ::  :: row_sub {{ tex [[r1]] [[~<]]_{[[mu]]} [[r2]] }}
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      element: (string)
      element: (string)
      element: (string)
      production_name: (production_name)
      homomorphism: (homomorphism
        name: (hom_name)
        body: (hom_body
          hom_inner_block: (hom_inner_block (string))
          hom_inner_block: (hom_inner_block (string))
          hom_inner_block: (hom_inner_block (string))
          hom_inner_block: (hom_inner_block (string)))))))

===================
multiple grammar blocks
===================
grammar
term, M :: 'term_' ::=
  | x               ::  :: var
type, t :: 'ty_' ::=
  | a               ::  :: var
---

(source_file
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      production_name: (production_name)))
  (grammar_rule
    (string_desc
      (string))
    (string_desc
      (string))
    (namespace_prefix)
    (production
      element: (string)
      production_name: (production_name))))

===========================
no identifier declarations
:error
===========================
grammar
 :: 't_' ::=
 ---

